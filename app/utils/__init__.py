# Importa classes e funções úteis dos módulos locais
from .search import (
    Problem,
    Node,
    Graph,
    GraphProblem,
    EightPuzzle,
    PlanRoute,
    PeakFindingProblem,
    NQueensProblem,
    GraphProblemStochastic,
    OnlineSearchProblem,
    LRTAStarAgent,
    OnlineDFSAgent,
    SimpleProblemSolvingAgentProgram,
    breadth_first_tree_search,
    depth_first_tree_search,
    depth_first_graph_search,
    breadth_first_graph_search,
    best_first_graph_search,
    uniform_cost_search,
    depth_limited_search,
    iterative_deepening_search,
    bidirectional_search,
    greedy_search,
    astar_search,
    recursive_best_first_search,
    hill_climbing,
    simulated_annealing,
    and_or_graph_search,
    genetic_search,
)

from .utils import (
    argmax_random_tie,
    argmin_random_tie,
    distance,
    vector_add,
    normalize,
    memoize,
    sigmoid,
    euclidean_distance,
    manhattan_distance,
    hamming_distance,
    relu,
    relu_derivative,
    weighted_choice,
    product,
    mean_error,
)

__all__ = [
    # search.py
    "Problem",
    "Node",
    "Graph",
    "GraphProblem",
    "EightPuzzle",
    "PlanRoute",
    "PeakFindingProblem",
    "NQueensProblem",
    "GraphProblemStochastic",
    "OnlineSearchProblem",
    "LRTAStarAgent",
    "OnlineDFSAgent",
    "SimpleProblemSolvingAgentProgram",
    "breadth_first_tree_search",
    "depth_first_tree_search",
    "depth_first_graph_search",
    "breadth_first_graph_search",
    "best_first_graph_search",
    "uniform_cost_search",
    "depth_limited_search",
    "iterative_deepening_search",
    "bidirectional_search",
    "greedy_search",
    "astar_search",
    "recursive_best_first_search",
    "hill_climbing",
    "simulated_annealing",
    "and_or_graph_search",
    "genetic_search",
    # utils.py
    "argmax_random_tie",
    "argmin_random_tie",
    "distance",
    "vector_add",
    "normalize",
    "memoize",
    "sigmoid",
    "euclidean_distance",
    "manhattan_distance",
    "hamming_distance",
    "relu",
    "relu_derivative",
    "weighted_choice",
    "product",
    "mean_error",
]
